{"version":3,"sources":["components/Input.js","components/AddPlant.js","components/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","errorMessage","errors","length","defaultState","id","nickname","species","h2Ofrequency","AddWrapper","styled","div","AddPlantForm","useState","formState","setFormState","setErrors","buttonDisabled","setButtonDisabled","history","useHistory","formSchema","yup","shape","typeError","required","positive","integer","useEffect","isValid","then","valid","handleInputChange","e","target","name","value","persist","validate","catch","err","console","log","validation","onSubmit","preventDefault","axios","post","res","setAddPlant","data","className","type","onChange","placeholder","onClick","goBack","disabled","HomeWrapper","Homepage","addPlant","NavWrapper","nav","App","to","path","AddPlant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4d4cad41.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\nfunction Input(props) {\n\n   const errorMessage = props.errors;\n\n    return(\n    \n        <div>\n     <input {...props}></input>\n     { props.errors.length != 0 && <p>{errorMessage}</p>}\n     </div>\n  );\n}\n\n\nexport default Input;","import React, { useState, useEffect } from 'react';\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport * as yup from \"yup\";\nimport Input from \"./Input\"\n\nconst defaultState = {\n  id: \"\",\n  nickname: \"\",\n  species: \"\",\n  h2Ofrequency: \"\",\n}\n\n\nfunction AddPlantForm(props) {\n\n   const [formState, setFormState] = useState(defaultState)\n   const [errors, setErrors] = useState({...defaultState})\n   const [buttonDisabled, setButtonDisabled] = useState(true);\n   const history = useHistory();\n   \n   //Schema for validation\n   const formSchema = yup.object().shape({\n    id: yup\n     .number()\n     .typeError('You must specify a number for your id')\n     .required()\n     .positive()\n     .integer(),\n    nickname: yup\n    .string()\n    .required(\"Please Enter Plant's Nickname\"),\n    species: yup\n    .string()\n    .required(\"Please Enter Your Plant Species\"),\n    h2Ofrequency: yup\n    .string()\n    .required(\"Please Enter Plant's Water Frequency\"),\n   })\n\n\n//Side effect hook to disable or enable add button based on validation with current formState synced\n    useEffect(() => {\n     formSchema.isValid(formState).then(valid => { setButtonDisabled(!valid);\n     });\n  }, [formState])\n\n\n//Validating the change in value, based on formSchema described above\n   const validation = (e) => {\n     \n    e.persist()\n\n    yup.reach(formSchema, e.target.name)\n\n    .validate(e.target.value)\n\n    .then(valid => {\n      setErrors({...errors, \n      [e.target.name]: \"\" \n   \n       });\n    })\n    .catch(err => {\n      setErrors({...errors, \n        [e.target.name]: err.errors[0] \n      })\n        console.log(err.errors[0])\n    })  \n   }\n\n\n//Recording user's Input & Call back for validation while user meets the requirements to fill\n   const handleInputChange = (e) => {\n    \n    setFormState({...formState,\n       [e.target.name]: e.target.value\n    })\n\n    validation(e);\n   }\n    \n   \n    \n\n//This will be triggered after the submit button is clicked and will post the data on specified url\n   const handleSubmit = (e) => {\n    e.preventDefault();\n    axios.post(\"https://reqres.in/api/users\", formState)\n    .then(res => {\n      props.setAddPlant(res.data)\n    })\n    .catch(err => {\n      console.log(err)\n   })\n   setFormState({...formState,\n    [e.target.name]: \" \"\n })\n   }\n\n\n  return (\n    \n    <div>\n\n      <AddWrapper>\n     <form onSubmit={handleSubmit}>\n       <div className=\"innerWrapper\">\n\n\n       {console.log(errors[0])}\n       <Input className=\"input\" name=\"id\" type=\"String\" value={formState.id} onChange={handleInputChange} placeholder=\"ENTER PLANT ID\" errors={errors.id}></Input>\n\n       <Input className=\"input\" name=\"nickname\" type=\"text\" value={formState.nickname} onChange={handleInputChange} placeholder=\"ENTER NAME\" errors={errors.nickname}></Input>\n\n\n         \n       <Input className=\"input\" name=\"species\" type=\"text\" value={formState.species} onChange={handleInputChange} placeholder=\"ENTER SPECIES\" errors={errors.species}></Input>\n       \n\n       \n       <Input className=\"input\" name=\"h2Ofrequency\" type=\"text\" value={formState.h2Ofrequency} onChange={handleInputChange} placeholder=\"ENTER H2OFREQUENCY\" errors={errors.h2Ofrequency}></Input>\n       \n      <button type=\"submit\" className=\"btn btn-primary list-button\" onClick={() => history.goBack()} disabled={buttonDisabled}> Add Plant</button>\n\n       </div>\n\n     </form>\n     </AddWrapper>\n   \n    </div>\n   \n  );\n}\n\nconst AddWrapper = styled.div`\n   width: 100%;\n   height: 500px;\n   display: flex;\n   font-family: 'Gotham SSm A', 'Gotham SSm B', sans-serif;\n   justify-content: center;\n   align-items: center;\n   \n   \n   .innerWrapper{\n    width: 100%;\n    margin-top: 2rem;\n    padding: 4rem;\n    background: green;\n    display: flex;\n    flex-direction: column;\n    color:red;\n    box-sizing: border-box;\n    \n   }\n\n   .input{\n     width: 100%;\n     background: lightgray;\n     margin: 5px 0 10px 0;\n     border: none;\n     color: #282828;\n     font-size: 16px;\n     padding: 10px 10px;\n     outline: none;\n     line-height: normal;\n   }\n  \n   button{\n\n     border: none;\n     margin-top: 10px;\n     padding: 1rem;\n     transition-duration: 0.4s;\n     :hover{\n      \n       background-color: #4CAF50;\n       cursor: pointer;\n\n     }\n   }\n`;\n\nexport default AddPlantForm;\n","import React, { useState } from 'react';\nimport styled from \"styled-components\";\n\nfunction Homepage(props) {\n   \n  return (\n    <div>\n        <HomeWrapper>\n        <h1>Your Plant Added</h1>\n\n     <div className=\"item-container\">\n     <h3>ID: { props.addPlant.id} </h3>\n     <h3>NICKNAME: { props.addPlant.nickname}</h3>\n     <h3>SPECIES: { props.addPlant.species}</h3>\n     <h3>H20Frequency: { props.addPlant.species}</h3>\n    </div>\n    </HomeWrapper>\n    </div>\n  );\n  }\n\nconst HomeWrapper = styled.div`\nheight: 800px;\nwidth: 100%;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nfont-family: 'Gotham SSm A', 'Gotham SSm B', sans-serif;\n\n.item-container{\n    margin-top: 40px;\n}\n\n.h1{\n    font-family: 'Gotham SSm A', 'Gotham SSm B', sans-serif;\n}\n\n`\nexport default Homepage;\n","import React, { useState } from 'react';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport AddPlantForm from './components/AddPlant';\nimport styled from \"styled-components\";\nimport Homepage from \"./components/Homepage\"\nfunction App() {\n\n  const [addPlant, setAddPlant] = useState([]);\n\n\n  return (\n    <div>\n      <NavWrapper>\n       \n       <Link className=\"link\" to=\"/\">Home</Link>\n       <Link className=\"link\" to=\"/addyourplant\">Add Plant</Link>\n\n        </NavWrapper>\n\n\n      \n      <Switch>\n          <Route path=\"/addyourplant\">\n            <AddPlantForm setAddPlant={setAddPlant}/>\n          </Route>\n          <Route path=\"/\"> \n          <Homepage addPlant={addPlant} />\n          </Route>\n       </Switch>\n    </div>\n  );\n  }\n\n  const NavWrapper = styled.nav`\n  display: flex;\n  justify-content: flex-end;\n  width: 100%;\n  border-bottom: 2px solid lightgray;\n  font-family: 'Gotham SSm A', 'Gotham SSm B', sans-serif;\n  .link {\n    color: black;\n    margin: 10px 15px 0 10px;\n    text-decoration: none;\n    text-transform: upperCase;\n    :hover{\n      border-bottom: 2px solid green;\n    }\n  }\n     \n     \n     \n`\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n    <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}